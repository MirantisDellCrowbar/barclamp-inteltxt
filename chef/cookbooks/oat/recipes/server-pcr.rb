#this part should be executed after pcr.rb gathered all clients pcrs


agents = search(:node, "recipes:oat\\:\\:client") || []
OATClient::config "https://127.0.0.1:8443", "password"

agents.each do |agent|
  #add all the agents into oat
  oem_name="#{agent[:name]}-oem"
  oem_description="#{agent[:name]} #{agent[:dmi][:bios][:base_board][:product_name]} #{agent[:dmi][:bios][:base_board][:serial_number]} generated by crowbar"
  ##############reg oem here############
  oem_t = {
    :name => oem_name,
    :description => oem_description
  }
  oem = OATClient::OEM.new(oem_t)
  Chef::Log.info("- create: #{oem.save}") unless oem.exists?
  ###done###
  os_name="#{agent[:name]}-os"
  os_version="#{agent[:lsb][:release]}"
  os_description="#{agent[:name]} #{agent[:lsb][:description]}"
  ##############reg os here############
  os_t = {
    :name => os_name,
    :description => os_description,
    :version => os_version
  }
  os = OATClient::OS.new(os)
  Chef::Log.info("- create: #{os.save}") unless os.exists?
  ###done###
  mle_oem_name="#{agent[:name]}-mle-oem"
  mle_oem_version="1" #we dont want to up version automaticaly or provide any interface to do it, it should be done manualy
  mle_oem_attestation_type="PCR"
  mle_oem_type="BIOS"
  mle_oem_description="#{agent[:name]} BIOS mle generated by crowbar"
  ##############reg oem mle here############
  mle_oem_t = {
    :name => mle_oem_name,
    :version => mle_oem_version,
    :attestation_type => mle_oem_attestation_type,
    :mle_type => mle_oem_type,
    :description => mle_oem_description,
    :oem_name => oem_name
  }
  mle_oem = OATClient::MLE.new(mle_oem_t)
  mle_oem_exists = mle_oem.exists?
  Chef::Log.info("- create: #{mle_oem.save}") unless mle_oem.exists?
  ###done###
  mle_vmm_name="#{agent[:name]}-vmm-oem"
  mle_vmm_version="1"
  mle_vmm_attestation_type="PCR"
  mle_vmm_type="VMM"
  mle_vmm_description="#{agent[:name]} #{agent[:kernel][:release] #{agent[:kernel][:version] VMM mle generated by crowbar}"
  ##############reg vmm mle here############
  mle_vmm_t = {
    :name => mle_vmm_name,
    :version => mle_vmm_version,
    :attestation_type => mle_vmm_attestation_type,
    :mle_type => mle_vmm_type,
    :description => mle_vmm_description,
    :os_name => os_name,
    :os_version => os_version
  }
  mle_vmm = OATClient::MLE.new(vmm_oem_t)
  mle_vmm_exists = mle_vmm.exists?
  Chef::Log.info("- create: #{mle_vmm.save}") unless mle_vmm.exists?
  ###done###
  host_name="#{agent[:name]}"
  host_ip="#{agent[:crowbar][:network][:admin][:address]}"
  host_port="12345" #seems deprecated, used only with active polling
  host_description="#{agent[:name]} host generated by crowbar"
  ##############reg host here############
  host_t = {
    :host_name => host_name,
    :ip_address => host_ip,
    :port => host_port,
    :bios_name => mle_oem_name,
    :bios_version => mle_oem_version,
    :bios_oem => oem_name,
    :vmm_name => mle_vmm_name,
    :vmm_version => mle_vmm_version,
    :vmm_os_name => os_name,
    :vmm_os_version => os_version,
    :email => nil,
    :addon_sonnection_string => nil,
    :description => host_description
  }
  host = OATClient::Host.new(host_t)
  Chef::Log.info("- create: #{host.save}") unless host.exists?
  ###done###
  unless mle_oem_exists
    (0..7).each do |n|
      pcr_name=n
      pcr_val=agent[:oat][:pcr][pcr_name]
      #####whitelist pcr with mle_oem_name mle_oem_version oem_name#####
      manifest = mle_oem.build_manifest(:name => pcr_name, :value => "")
      manifest.save
    end
  (17..19).each do |n|
    pcr_name=n
    pcr_val=agent[:oat][:pcr][pcr_name]
    #####whitelist pcr with mle_vmm_name mle_vmm_version os_name os_version#####
  end
end
